# Unique name for this workflow
name: Pull Request Validate Sandbox

# Definition when the workflow should run
on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

# Jobs to be executed
jobs:
  validate-package-against-sandbox:
    runs-on: ubuntu-latest

    steps:
      # This 3rdparty filter is used so that some steps can be run only on the relevant changed package
      - uses: dorny/paths-filter@v2.2.0
        id: filter
        with:
          filters: |
            core:
              - 'uipath-core/main/default/**/*'
            commons:
              - 'uipath-commons/main/default/**/*'
            service:
              - 'uipath-service/main/default/**/*'
            sales:
              - 'uipath-sales/main/default/**/*'

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install

      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@v2

      # Store secret for dev hub
      - name: "Populate auth file with DEVHUB_AUTH_URL secret"
        shell: bash
        run: "echo ${{ secrets.DEVHUB_AUTH_URL}} > ./DEVHUB_AUTH_URL.txt"

      # Authenticate dev hub
      - name: "Authenticate Dev Hub"
        run: "sfdx force:auth:sfdxurl:store -f ./DEVHUB_AUTH_URL.txt -a devhub -d"

      #  new uipath-core version if contents changed
      - name: "create uipath-core beta version"
        if: steps.filter.outputs.core == 'true'
        run: "sfdx force:package:version:create -p uipath-core -d uipath-core --wait 30 -f config/project-scratch-def.json -k unlockedclear -c"

      #  new uipath-commons version if contents changed
      - name: "create uipath-commons beta version"
        if: steps.filter.outputs.commons == 'true'
        run: "sfdx force:package:version:create -p uipath-commons -d uipath-commons --wait 30 -f config/project-scratch-def.json -k unlockedclear -c"

      #  new uipath-service version if contents changed
      - name: "create uipath-service beta version"
        if: steps.filter.outputs.service == 'true'
        run: "sfdx force:package:version:create -p uipath-service -d uipath-service --wait 30 -f config/project-scratch-def.json -k unlockedclear -c"

      #  new uipath-sales version if contents changed
      - name: "create uipath-sales beta version"
        if: steps.filter.outputs.sales == 'true'
        run: "sfdx force:package:version:create -p uipath-sales -d uipath-sales --wait 30 -f config/project-scratch-def.json -k unlockedclear"

      # Store secret for CI
      - name: "Populate auth file with CI_AUTH_URL secret"
        shell: bash
        run: "echo ${{ secrets.CI_AUTH_URL}} > ./CI_AUTH_URL.txt"

      # Authenticate CI Sandbox
      - name: "Authenticate CI Org"
        run: "sfdx force:auth:sfdxurl:store -f ./CI_AUTH_URL.txt -a ci -d"

      #  Install latest uipath-core version if contents changed
      - name: "Install Core Package in Sandbox"
        if: steps.filter.outputs.core == 'true'
        run: "sfdx force:package:install --noprompt --package $(sfdx force:package:version:list -p 0Ho1Q000000CaTDSA0 -v devhub -o CreatedDate --concise | tail -1 | awk '{print $3}') -u ci -w 60 -k unlockedclear --apexcompile package"

      #  Install latest uipath-commons version if contents changed
      - name: "Install Commons Package in Sandbox"
        if: steps.filter.outputs.commons == 'true'
        run: "sfdx force:package:install --noprompt --package $(sfdx force:package:version:list -p 0Ho1Q000000CaTISA0 -v devhub -o CreatedDate --concise | tail -1 | awk '{print $3}') -u ci -w 60 -k unlockedclear --apexcompile package"

      #  Install latest uipath-service version if contents changed
      - name: "Install service Package in Sandbox"
        if: steps.filter.outputs.service == 'true'
        run: "sfdx force:package:install --noprompt --package $(sfdx force:package:version:list -p 0Ho1Q000000blJdSAI -v devhub -o CreatedDate --concise | tail -1 | awk '{print $3}') -u ci -w 60 -k unlockedclear --apexcompile package"

      #  Install latest uipath-sales version if contents changed
      - name: "Install Sales Package in Sandbox"
        if: steps.filter.outputs.sales == 'true'
        run: "sfdx force:package:install --noprompt --package $(sfdx force:package:version:list -p 0Ho1Q000000blJsSAI -v devhub -o CreatedDate --concise | tail -1 | awk '{print $3}') -u ci -w 60 -k unlockedclear --apexcompile package"

      # Update sfdx-project.json and README to use only latest package version
      - name: "Update sfdx-project.json and README"
        if: (steps.filter.outputs.commons == 'true' ||  steps.filter.outputs.core == 'true' ||  steps.filter.outputs.service == 'true' ||  steps.filter.outputs.sales == 'true') && steps.packaging-updater.outputs.isSuccess
        id: packaging-updater
        uses: muenzpraeger/github-action-sfdx-packaging-updater@master

      # Re-add changes back to source
      - name: "Add new package version, updated sfdx-project.json and README to source"
        if: (steps.filter.outputs.commons == 'true' ||  steps.filter.outputs.core == 'true' ||  steps.filter.outputs.service == 'true' || steps.filter.outputs.sales == 'true') && steps.packaging-updater.outputs.isSuccess
        uses: Automattic/action-commit-to-branch@master
        with:
          branch: ${{ github.head_ref }}
          commit_message: "Added new package version ID"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Run Apex tests in CI Sandbox
      #- name: "Run Apex tests"
      #  run: "sfdx force:apex:test:run -l RunLocalTests -u ci -c -r human -d ./tests/apex -w 120 --codecoverage"
      # Store test results in var
      #- name: "Store test results in var"
      #  run: echo ::set-env name=APEX_TEST_OUTPUT::$(cat ./tests/apex/test-result.txt)
      # Write test results as PR comment
      #- name: "Write test results as PR comment"
      #  uses: unsplash/comment-on-pr@master
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    msg: "${{ env.APEX_TEST_OUTPUT }}"
      #    check_for_duplicate_msg: false
